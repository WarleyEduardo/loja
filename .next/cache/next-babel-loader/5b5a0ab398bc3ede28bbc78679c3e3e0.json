{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\n/*Integrando a parte de login dos dados do cliente (2/2)*/\nimport { numberPattern } from './format';\nexport var onlyNumbers = function onlyNumbers(value) {\n  var auxCep = (value || '').match(numberPattern);\n  return (auxCep || []).join('');\n};\nexport var validateCPF = function validateCPF(_strCPF) {\n  var strCPF = onlyNumbers(_strCPF);\n  if (strCPF.length !== 11) return false;\n  var soma;\n  var resto;\n  soma = 0;\n  if (strCPF == '00000000000') return false;\n  for (var i = 1; i <= 9; i++) {\n    soma = soma + _parseInt(strCPF.substring(i - 1, i)) * (11 - i);\n  }\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != _parseInt(strCPF.substring(9, 10))) return false;\n  soma = 0;\n  for (var j = 1; j <= 10; j++) {\n    soma = soma + _parseInt(strCPF.substring(j - 1, j)) * (12 - j);\n  }\n  resto = soma * 10 % 11;\n  if (resto == 10 || resto == 11) resto = 0;\n  if (resto != _parseInt(strCPF.substring(10, 11))) return false;\n  return true;\n};\nexport default {\n  validateCPF: validateCPF,\n  onlyNumbers: onlyNumbers\n};","map":{"version":3,"names":["numberPattern","onlyNumbers","value","auxCep","match","join","validateCPF","_strCPF","strCPF","length","soma","resto","i","substring","j"],"sources":["D:/javaScript/lojavirtual/lojavirtual/utils/validade.js"],"sourcesContent":["\r\n/*Integrando a parte de login dos dados do cliente (2/2)*/\r\nimport { numberPattern } from './format';\r\n\r\nexport const onlyNumbers = (value) => {\r\n\tconst auxCep = (value || '').match(numberPattern);\r\n\treturn (auxCep || []).join('');\r\n};\r\n\r\nexport const validateCPF = (_strCPF) => {\r\n\tconst strCPF = onlyNumbers(_strCPF);\r\n\tif (strCPF.length !== 11) return false;\r\n\tlet soma;\r\n\tlet resto;\r\n\tsoma = 0;\r\n\tif (strCPF == '00000000000') return false;\r\n\r\n\tfor (var i = 1; i <= 9; i++) {\r\n\t\tsoma = soma + parseInt(strCPF.substring(i - 1, i)) * (11 - i);\r\n\t}\r\n\tresto = (soma * 10) % 11;\r\n\r\n\tif (resto == 10 || resto == 11) resto = 0;\r\n\tif (resto != parseInt(strCPF.substring(9, 10))) return false;\r\n\r\n\tsoma = 0;\r\n\tfor (var j = 1; j <= 10; j++) {\r\n\t\tsoma = soma + parseInt(strCPF.substring(j - 1, j)) * (12 - j);\r\n\t}\r\n\tresto = (soma * 10) % 11;\r\n\r\n\tif (resto == 10 || resto == 11) resto = 0;\r\n\tif (resto != parseInt(strCPF.substring(10, 11))) return false;\r\n\r\n\treturn true;\r\n};\r\n\r\nexport default {\r\n\tvalidateCPF,\r\n\tonlyNumbers,\r\n};"],"mappings":";AACA;AACA,SAASA,aAAa,QAAQ,UAAU;AAExC,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIC,KAAK,EAAK;EACrC,IAAMC,MAAM,GAAG,CAACD,KAAK,IAAI,EAAE,EAAEE,KAAK,CAACJ,aAAa,CAAC;EACjD,OAAO,CAACG,MAAM,IAAI,EAAE,EAAEE,IAAI,CAAC,EAAE,CAAC;AAC/B,CAAC;AAED,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIC,OAAO,EAAK;EACvC,IAAMC,MAAM,GAAGP,WAAW,CAACM,OAAO,CAAC;EACnC,IAAIC,MAAM,CAACC,MAAM,KAAK,EAAE,EAAE,OAAO,KAAK;EACtC,IAAIC,IAAI;EACR,IAAIC,KAAK;EACTD,IAAI,GAAG,CAAC;EACR,IAAIF,MAAM,IAAI,aAAa,EAAE,OAAO,KAAK;EAEzC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;IAC5BF,IAAI,GAAGA,IAAI,GAAG,UAASF,MAAM,CAACK,SAAS,CAACD,CAAC,GAAG,CAAC,EAAEA,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EAC9D;EACAD,KAAK,GAAID,IAAI,GAAG,EAAE,GAAI,EAAE;EAExB,IAAIC,KAAK,IAAI,EAAE,IAAIA,KAAK,IAAI,EAAE,EAAEA,KAAK,GAAG,CAAC;EACzC,IAAIA,KAAK,IAAI,UAASH,MAAM,CAACK,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,KAAK;EAE5DH,IAAI,GAAG,CAAC;EACR,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,IAAI,EAAE,EAAEA,CAAC,EAAE,EAAE;IAC7BJ,IAAI,GAAGA,IAAI,GAAG,UAASF,MAAM,CAACK,SAAS,CAACC,CAAC,GAAG,CAAC,EAAEA,CAAC,CAAC,CAAC,IAAI,EAAE,GAAGA,CAAC,CAAC;EAC9D;EACAH,KAAK,GAAID,IAAI,GAAG,EAAE,GAAI,EAAE;EAExB,IAAIC,KAAK,IAAI,EAAE,IAAIA,KAAK,IAAI,EAAE,EAAEA,KAAK,GAAG,CAAC;EACzC,IAAIA,KAAK,IAAI,UAASH,MAAM,CAACK,SAAS,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,OAAO,KAAK;EAE7D,OAAO,IAAI;AACZ,CAAC;AAED,eAAe;EACdP,WAAW,EAAXA,WAAW;EACXL,WAAW,EAAXA;AACD,CAAC"},"metadata":{},"sourceType":"module"}